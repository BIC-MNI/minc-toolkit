project(minc-toolkit)
enable_language(C)
enable_language(CXX)

cmake_minimum_required(VERSION 2.6)

SET(MINC_TOOLKIT_PACKAGE_VERSION_MAJOR 0)
SET(MINC_TOOLKIT_PACKAGE_VERSION_MINOR 3)
SET(MINC_TOOLKIT_PACKAGE_VERSION_PATCH 17)
SET(MINC_TOOLKIT_RELEASE_DATE "20130307")

SET(MINC_TOOLKIT_VERSION_FULL "${MINC_TOOLKIT_PACKAGE_VERSION_MAJOR}.${MINC_TOOLKIT_PACKAGE_VERSION_MINOR}.${MINC_TOOLKIT_PACKAGE_VERSION_PATCH}-${MINC_TOOLKIT_RELEASE_DATE}")

#SET(CPACK_GENERATOR DEB)
SET(CPACK_PACKAGE_NAME "minc-toolkit")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "minc image processing toolkit")
SET(CPACK_PACKAGE_VENDOR "Brain Imaging Center, Montreal Neurological Institute, McGill University")
SET(CPACK_PACKAGE_VERSION_MAJOR ${MINC_TOOLKIT_PACKAGE_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${MINC_TOOLKIT_PACKAGE_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${MINC_TOOLKIT_PACKAGE_VERSION_PATCH})
SET(CPACK_PACKAGE_CONTACT "Vladimir Fonov <vladmir.fonov@gmail.com>")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "minc-toolkit-${MINC_TOOLKIT_VERSION_FULL}")
SET(CPACK_MONOLITHIC_INSTALL ON)
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README.md")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/COPYING.txt")

#IF (CMAKE_SYSTEM_PROCESSOR MATCHES "unknown")
EXEC_PROGRAM(uname ARGS "-m" OUTPUT_VARIABLE CMAKE_SYSTEM_PROCESSOR)
#ENDIF (CMAKE_SYSTEM_PROCESSOR MATCHES "unknown")

IF(NOT DEFINED CPACK_SYSTEM_NAME)
  SET(MT_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
ENDIF(NOT DEFINED CPACK_SYSTEM_NAME)

IF(${CMAKE_SYSTEM_NAME} MATCHES Windows)
  IF(CMAKE_CL_64)
    SET(MT_SYSTEM_NAME win64-${CMAKE_SYSTEM_PROCESSOR})
  ELSE(CMAKE_CL_64)
    SET(MT_SYSTEM_NAME win32-${CMAKE_SYSTEM_PROCESSOR})
  ENDIF(CMAKE_CL_64)
ELSE(${CMAKE_SYSTEM_NAME} MATCHES Windows)
  IF(${CMAKE_SYSTEM_NAME} MATCHES Linux )
    EXEC_PROGRAM(lsb_release ARGS "-s -i" OUTPUT_VARIABLE SYSTEM_ID)
    EXEC_PROGRAM(lsb_release ARGS "-s -r" OUTPUT_VARIABLE SYSTEM_RELEASE)
    SET(MT_SYSTEM_NAME "${SYSTEM_ID}_${SYSTEM_RELEASE}-${CMAKE_SYSTEM_PROCESSOR}")
  ENDIF(${CMAKE_SYSTEM_NAME} MATCHES Linux )
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES Windows)

SET(CPACK_PACKAGE_FILE_NAME "minc-toolkit-${MINC_TOOLKIT_VERSION_FULL}-${MT_SYSTEM_NAME}")

# register local modules
SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_SOURCE_DIR}/cmake-modules")
INCLUDE(PreventInSourceBuilds)
AssureOutOfSourceBuilds(minc-toolkit)

# default install directories
SET(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR} CACHE PATH "Install path prefix, prepended onto install directories.")
SET(CPACK_SET_DESTDIR    ON)
SET(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
SET(CPACK_STRIP_FILES ON)

# superbuild options
OPTION(MT_BUILD_LITE         "Build lite version of minc-toolkit, without ITK or visual tools" OFF)
OPTION(MT_BUILD_SHARED_LIBS  "Build shared libraries." OFF)
OPTION(USE_SYSTEM_ZLIB       "Use System ZLIB "       OFF)
OPTION(USE_SYSTEM_NETCDF     "Use System NETCDF > 3.6.3" OFF)
OPTION(USE_SYSTEM_HDF5       "Use System HDF5 > 1.8"     OFF)
OPTION(USE_SYSTEM_PCRE       "Use System PCRE "       OFF)
OPTION(USE_SYSTEM_GSL        "Use System GSL "        OFF)
OPTION(USE_SYSTEM_FFTW3F     "Use System FFTW3F "     OFF)
OPTION(MT_BUILD_ITK_TOOLS    "Build ITK-based tools"  OFF)
OPTION(MT_BUILD_VISUAL_TOOLS "Build visual tools (Display, Register, postf, ray_trace) requires OpenGL & Glut"  OFF)
OPTION(USE_SYSTEM_ITK        "Use System ITK" OFF)

IF(MT_BUILD_LITE)
  SET(MT_BUILD_ITK_TOOLS OFF)
  SET(MT_BUILD_VISUAL_TOOLS OFF)
  SET(MT_BUILD_MINC_ANTS OFF)
  SET(MT_BUILD_C3D OFF)

  SET(CPACK_PACKAGE_FILE_NAME "minc-toolkit-${MINC_TOOLKIT_VERSION_FULL}-${MT_SYSTEM_NAME}-lite")
ENDIF(MT_BUILD_LITE)

ENABLE_TESTING()
INCLUDE(CTest)

# provide test environement
# CACHE INTERNAL FORCE
SET(MINC_TEST_ENVIRONMENT
 "PATH=${CMAKE_CURRENT_BINARY_DIR}:${CMAKE_CURRENT_BINARY_DIR}/N3:${CMAKE_CURRENT_BINARY_DIR}/classify:${CMAKE_CURRENT_BINARY_DIR}/minctools/progs:${CMAKE_CURRENT_BINARY_DIR}/mni_autoreg/mincblur:${CMAKE_CURRENT_BINARY_DIR}/mni_autoreg/make_phantom:${CMAKE_CURRENT_BINARY_DIR}/mni_autoreg/minctracc:$ENV{PATH};PERL5LIB=${CMAKE_SOURCE_DIR}/mni-perllib:${CMAKE_CURRENT_BINARY_DIR}/mni-perllib/perl:${CMAKE_CURRENT_BINARY_DIR}/perl-modules:$ENV{PERL5LIB}"
)

# for superbuild
IF(USE_SYSTEM_ZLIB AND USE_SYSTEM_NETCDF AND USE_SYSTEM_HDF5  AND USE_SYSTEM_PCRE  AND USE_SYSTEM_GSL AND USE_SYSTEM_FFTW3F AND USE_SYSTEM_ITK)
  SET(USE_SUPERBUILD OFF)
ELSE(USE_SYSTEM_ZLIB AND USE_SYSTEM_NETCDF AND USE_SYSTEM_HDF5  AND USE_SYSTEM_PCRE AND USE_SYSTEM_GSL AND USE_SYSTEM_FFTW3F AND USE_SYSTEM_ITK)
  INCLUDE(ExternalProject)
  SET(USE_SUPERBUILD ON)
  INCLUDE(ConfigureExternalProjects)
ENDIF(USE_SYSTEM_ZLIB AND USE_SYSTEM_NETCDF AND USE_SYSTEM_HDF5  AND USE_SYSTEM_PCRE  AND USE_SYSTEM_GSL AND USE_SYSTEM_FFTW3F AND USE_SYSTEM_ITK)

SET(SUPERBUILD_STAGING_PREFIX ${CMAKE_BINARY_DIR}/external)

# required packages
FIND_PACKAGE( Perl   REQUIRED )
# required for minc
IF(USE_SYSTEM_ZLIB)
  FIND_PACKAGE( ZLIB   REQUIRED )
ELSE(USE_SYSTEM_ZLIB)
  INCLUDE(BuildZLIB)
  build_zlib( ${CMAKE_INSTALL_PREFIX} ${SUPERBUILD_STAGING_PREFIX})
ENDIF(USE_SYSTEM_ZLIB)

IF(USE_SYSTEM_NETCDF)
  FIND_PACKAGE( NETCDF REQUIRED )
ELSE(USE_SYSTEM_NETCDF)
  INCLUDE(BuildNETCDF)
  build_netcdf( ${CMAKE_INSTALL_PREFIX} ${SUPERBUILD_STAGING_PREFIX})
ENDIF(USE_SYSTEM_NETCDF)

IF(USE_SYSTEM_HDF5)
  FIND_PACKAGE( HDF5   REQUIRED )
ELSE(USE_SYSTEM_HDF5)
  INCLUDE(BuildHDF5)
  build_hdf5( ${CMAKE_INSTALL_PREFIX} ${SUPERBUILD_STAGING_PREFIX} ${ZLIB_INCLUDE_DIR} ${ZLIB_LIBRARY})
  IF(NOT USE_SYSTEM_ZLIB)
    add_dependencies(HDF5 ZLIB)
  ENDIF(NOT USE_SYSTEM_ZLIB)
ENDIF(USE_SYSTEM_HDF5)

#required for some minc tools
FIND_PACKAGE( BISON )
FIND_PACKAGE( FLEX )
FIND_PACKAGE( Threads)

#required for bicpl
IF(USE_SYSTEM_NETPBM) # else we will use bundled libppm
  FIND_PACKAGE( NETPBM QUIET )
ENDIF(USE_SYSTEM_NETPBM)

#required for oobicpl
IF(USE_SYSTEM_PCRE)
  FIND_PACKAGE( PCRE QUIET )
ELSE(USE_SYSTEM_PCRE)
  INCLUDE(BuildPCRE)
  build_pcre(${CMAKE_INSTALL_PREFIX} ${SUPERBUILD_STAGING_PREFIX})
ENDIF(USE_SYSTEM_PCRE)


SET(MINC_TOOLKIT_BUILD ON)
SET(MINC_TOOLKIT_BUILD_DIR   ${CMAKE_BINARY_DIR})
SET(MINC_TOOLKIT_INSTALL_DIR ${CMAKE_INSTALL_PREFIX})

#setup parameters
#MINC2
SET(LIBMINC_BUILD_V2           ON)
SET(LIBMINC_MINC1_SUPPORT      ON)
SET(LIBMINC_FOUND              ON)
SET(LIBMINC_BUILD_TOOLS        ON)
SET(LIBMINC_BUILD_CONVERTERS   ON)
SET(LIBMINC_BUILD_EZMINC       ON)
SET(LIBMINC_BUILD_EZMINC_EXAMPLES ON)
SET(LIBMINC_INTEGRATE_VOLUME_IO OFF)
# we have both MINC1 API
SET(HAVE_MINC1 ON)
# and MINC2 API
SET(HAVE_MINC2 ON)


IF(MT_BUILD_SHARED_LIBS)
  SET(LIBMINC_BUILD_SHARED_LIBS    OFF)
  #EBTKS
  SET(EBTKS_BUILD_SHARED_LIBS      OFF)
  #bicpl
  SET(BICPL_BUILD_SHARED_LIBS      ON)
  #oobicpl
  SET(OOBICPL_BUILD_SHARED_LIBS    ON)
  #arguments
  SET(ARGUMENTS_BUILD_SHARED_LIBS  ON)
  #bicgl
  SET(BICGL_BUILD_SHARED_LIBS      ON)
ELSE(MT_BUILD_SHARED_LIBS)

  SET(LIBMINC_BUILD_SHARED_LIBS      OFF)
  #EBTKS
  SET(EBTKS_BUILD_SHARED_LIBS      OFF)
  #bicpl
  SET(BICPL_BUILD_SHARED_LIBS      OFF)
  #oobicpl
  SET(OOBICPL_BUILD_SHARED_LIBS    OFF)
  #arguments
  SET(ARGUMENTS_BUILD_SHARED_LIBS  OFF)
  #bicgl
  SET(BICGL_BUILD_SHARED_LIBS      OFF)
ENDIF(MT_BUILD_SHARED_LIBS)


#EZMINC
SET(EZMINC_BUILD_MINCNLM  ON)
SET(EZMINC_BUILD_DISTORTION_CORRECTION  ON)
SET(EZMINC_BUILD_MRFSEG  ON)
SET(EZMINC_BUILD_DD      ON)
SET(EZMINC_BUILD_TOOLS   ON)

ADD_SUBDIRECTORY(libminc)

IF(NOT USE_SYSTEM_NETCDF)
  ADD_DEPENDENCIES(minc2 NETCDF)
ENDIF(NOT USE_SYSTEM_NETCDF)

IF(NOT USE_SYSTEM_HDF5)
  ADD_DEPENDENCIES(minc2 HDF5)
ENDIF(NOT USE_SYSTEM_HDF5)

# Setup main minc variables
SET(LIBMINC_USE_FILE ${CMAKE_BINARY_DIR}/libminc/UseLIBMINC.cmake CACHE INTERNAL "LIBMINC use file")
INCLUDE(${CMAKE_BINARY_DIR}/libminc/LIBMINCConfig.cmake)
INCLUDE(${LIBMINC_USE_FILE})

ADD_SUBDIRECTORY(minctools)
ADD_SUBDIRECTORY(EBTKS)
ADD_DEPENDENCIES(EBTKS minc2)

# setup EBTKS variables
SET(EBTKS_USE_FILE ${CMAKE_BINARY_DIR}/EBTKS/UseEBTKS.cmake CACHE INTERNAL "EBTKS use file")
INCLUDE(${CMAKE_BINARY_DIR}/EBTKS/EBTKSConfig.cmake)
INCLUDE(${EBTKS_USE_FILE})

ADD_SUBDIRECTORY(bicpl)
ADD_DEPENDENCIES(bicpl minc2)

#setup bicpl variables
SET(BICPL_USE_FILE ${CMAKE_BINARY_DIR}/bicpl/UseBICPL.cmake CACHE INTERNAL "BICPL use file")
INCLUDE(${CMAKE_BINARY_DIR}/bicpl/BICPLConfig.cmake)
INCLUDE(${BICPL_USE_FILE})
IF(NOT USE_SYSTEM_NETPBM)
  ADD_DEPENDENCIES(bicpl NETPBM)
ENDIF(NOT USE_SYSTEM_NETPBM)

ADD_SUBDIRECTORY(arguments)

#setup arguments variables
SET(ARGUMENTS_USE_FILE ${CMAKE_BINARY_DIR}/bicpl/UseARGUMENTS.cmake CACHE INTERNAL "ARGUMENTS use file")
INCLUDE(${CMAKE_BINARY_DIR}/arguments/ARGUMENTSConfig.cmake)
INCLUDE(${ARGUMENTS_USE_FILE})

ADD_SUBDIRECTORY(oobicpl)
ADD_DEPENDENCIES(oobicpl minc2 bicpl arguments)

#setup oobicpl variables
SET(OOBICPL_USE_FILE ${CMAKE_BINARY_DIR}/bicpl/UseOOBICPL.cmake CACHE INTERNAL "OOBICPL use file")
INCLUDE(${CMAKE_BINARY_DIR}/oobicpl/OOBICPLConfig.cmake)
INCLUDE(${OOBICPL_USE_FILE})

ADD_SUBDIRECTORY(BEaST)
#ADD_SUBDIRECTORY(BEaST_library)
ADD_SUBDIRECTORY(conglomerate)
ADD_SUBDIRECTORY(classify)
ADD_SUBDIRECTORY(mni-perllib)
ADD_SUBDIRECTORY(N3)

ADD_SUBDIRECTORY(glim_image)
ADD_SUBDIRECTORY(mni_autoreg)
ADD_SUBDIRECTORY(inormalize)
ADD_SUBDIRECTORY(mrisim)
ADD_SUBDIRECTORY(bic-pipelines)
ADD_SUBDIRECTORY(perl-modules)

# build tools that require ITK
IF(MT_BUILD_ITK_TOOLS)

  OPTION(MT_BUILD_MINC_ANTS "Build mincANTS " OFF)
  OPTION(MT_BUILD_C3D "Build convert3D " OFF)

  SET(HAVE_MINC4ITK  ON)

  #required for minc4itk & EZminc
  IF(USE_SYSTEM_ITK)
    FIND_PACKAGE(ITK )
  ELSE(USE_SYSTEM_ITK)
    INCLUDE(BuildITKv3)
    build_itkv3(${CMAKE_INSTALL_PREFIX} ${SUPERBUILD_STAGING_PREFIX} )
  ENDIF(USE_SYSTEM_ITK)

  #required for EZminc
  IF(USE_SYSTEM_GSL)
    FIND_PACKAGE(GSL)
  ELSE(USE_SYSTEM_GSL)
    INCLUDE(BuildGSL)
    build_gsl(${CMAKE_INSTALL_PREFIX} ${SUPERBUILD_STAGING_PREFIX})
  ENDIF(USE_SYSTEM_GSL)

  IF(USE_SYSTEM_FFTW3F)
    FIND_PACKAGE(FFTW3F)
  ELSE(USE_SYSTEM_FFTW3)
    INCLUDE(BuildFFTW3F)
    build_fftw3f(${CMAKE_INSTALL_PREFIX} ${SUPERBUILD_STAGING_PREFIX})
  ENDIF(USE_SYSTEM_FFTW3F)

  # minc4itk integration library
  ADD_SUBDIRECTORY(minc4itk)
  INCLUDE(${CMAKE_CURRENT_BINARY_DIR}/minc4itk/MINC4ITKConfig.cmake)
  # setup minc4itk variables
  SET(MINC4ITK_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/minc4itk/include)
  SET(MINC4ITK_LIBRARY_DIRS ${CMAKE_BINARY_DIR}/minc4itk/)

  ADD_DEPENDENCIES(ITKIOMINC minc2)

  IF(NOT USE_SYSTEM_ITK)
    ADD_DEPENDENCIES(ITKIOMINC ITKv3)
  ENDIF(NOT USE_SYSTEM_ITK)

  ADD_SUBDIRECTORY(EZminc)
  ADD_DEPENDENCIES(minc_image_proc minc2)
  ADD_DEPENDENCIES(mincnlm minc2)
  ADD_DEPENDENCIES(mrfseg minc2)
  ADD_DEPENDENCIES(mrflib minc2)

  IF(MT_BUILD_MINC_ANTS)
    ADD_SUBDIRECTORY(mincANTS)
    ADD_DEPENDENCIES(mincANTS ITKIOMINC minc2)
  ENDIF(MT_BUILD_MINC_ANTS)

  IF(MT_BUILD_C3D)
    ADD_SUBDIRECTORY(c3d)
    ADD_DEPENDENCIES(c3d ITKIOMINC minc2)
    ADD_DEPENDENCIES(c2d ITKIOMINC minc2)
  ENDIF(MT_BUILD_C3D)


  IF(NOT USE_SYSTEM_ITK)
    ADD_DEPENDENCIES(ITKIOMINC ITKv3)
  ENDIF(NOT USE_SYSTEM_ITK)

  IF(NOT USE_SYSTEM_GSL)
    ADD_DEPENDENCIES(minc_image_proc GSL)
  ENDIF(NOT USE_SYSTEM_GSL)

  IF(NOT USE_SYSTEM_FFTW3F)
    ADD_DEPENDENCIES(minc_image_proc FFTW3F)
  ENDIF(NOT USE_SYSTEM_FFTW3F)
ENDIF(MT_BUILD_ITK_TOOLS)

# build tools that require OpenGL and GLUT
IF(MT_BUILD_VISUAL_TOOLS)
  FIND_PACKAGE( OpenGL REQUIRED )
  FIND_PACKAGE( GLUT REQUIRED )
  FIND_PACKAGE( X11 QUIET )

  ADD_SUBDIRECTORY(bicgl)
  INCLUDE(${CMAKE_BINARY_DIR}/bicgl/BICGLConfig.cmake)

  ADD_SUBDIRECTORY(ray_trace)
  ADD_DEPENDENCIES(ray_trace bicgl minc2 bicpl)

  ADD_SUBDIRECTORY(Display)
  ADD_DEPENDENCIES(Display bicgl minc2 bicpl)

  ADD_SUBDIRECTORY(Register)
  ADD_DEPENDENCIES(register bicgl minc2 bicpl)

  IF(X11_FOUND)
    ADD_SUBDIRECTORY(postf)
    ADD_DEPENDENCIES(postf minc2)
  ENDIF(X11_FOUND)
ENDIF(MT_BUILD_VISUAL_TOOLS)

# DO nothing?
IF(USE_SUPERBUILD)
  #install external dependencies to final destination
  INSTALL(DIRECTORY ${SUPERBUILD_STAGING_PREFIX}/${CMAKE_INSTALL_PREFIX}/bin
        DESTINATION .
        PATTERN *
        PERMISSIONS OWNER_EXECUTE OWNER_READ OWNER_WRITE GROUP_EXECUTE GROUP_READ WORLD_READ WORLD_EXECUTE )

  INSTALL(DIRECTORY ${SUPERBUILD_STAGING_PREFIX}/${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}
        DESTINATION .)

  INSTALL(DIRECTORY ${SUPERBUILD_STAGING_PREFIX}/${CMAKE_INSTALL_PREFIX}/include
        DESTINATION .)

  # do we really need to install share?
  INSTALL(DIRECTORY ${SUPERBUILD_STAGING_PREFIX}/${CMAKE_INSTALL_PREFIX}/share
        DESTINATION .)
ENDIF(USE_SUPERBUILD)

# write configuration information
IF(UNIX)
  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/minc-toolkit-config.unix.sh.cmake ${CMAKE_CURRENT_BINARY_DIR}/minc-toolkit-config.sh @ONLY)
  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/minc-toolkit-config.unix.csh.cmake ${CMAKE_CURRENT_BINARY_DIR}/minc-toolkit-config.csh @ONLY)
ENDIF(UNIX)

IF(APPLE)
  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/minc-toolkit-config.apple.sh.cmake ${CMAKE_CURRENT_BINARY_DIR}/minc-toolkit-config.sh @ONLY)
  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/minc-toolkit-config.apple.csh.cmake ${CMAKE_CURRENT_BINARY_DIR}/minc-toolkit-config.csh @ONLY)
ENDIF(APPLE)

INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/minc-toolkit-config.sh ${CMAKE_CURRENT_BINARY_DIR}/minc-toolkit-config.csh DESTINATION .)

# setup additional variables for making Debian package
INCLUDE(DebianPackageAddons)

# according to http://www.cmake.org/pipermail/cmake/2011-November/047137.html it's better to put this in the end
INCLUDE(CPack)
